# https://github.com/jrouwe/JoltPhysics.git
# rev 4f9a86b53916cc91c042acf6cd79eeef62bf5f0c
Root    ?= ../../../.. ;
Location = prog/3rdPartyLibs/phys/joltPhysics ;
PlatformArch_windows ?= x86_64 ;

include $(Root)/prog/_jBuild/defaults.jam ;

local supp = windows linux xboxOne scarlett android nswitch macOS iOS tvOS ps4 ps5 ;
if ! $(Platform) in $(supp) { Exit Jolt\: Platform\=$(Platform) is not supported, must be one of: $(supp) ; }

TargetType  = lib ;
Target      = 3rdPartyLibs/phys/joltPhysics.lib ;

local _SrcDirs =
  Jolt/AABBTree
  Jolt/Core
  Jolt/Geometry
  Jolt/Math
  Jolt/ObjectStream
  Jolt/Physics
  Jolt/Physics/Body
  Jolt/Physics/Character
  Jolt/Physics/Collision
  Jolt/Physics/Collision/BroadPhase
  Jolt/Physics/Collision/Shape
  Jolt/Physics/Constraints
  Jolt/Physics/Ragdoll
  Jolt/Physics/SoftBody
  Jolt/Physics/Vehicle
  Jolt/Skeleton
  Jolt/TriangleSplitter
;

Sources += Jolt/RegisterTypes.cpp ;

AddIncludes = $(Root)/$(Location) ;
include $(Root)/$(Location)/setup.jam ;

if $(Platform) in windows { CPPopt += -D_CRT_SECURE_NO_WARNINGS -D_CRT_SECURE_NO_DEPRECATE -D_SCL_SECURE_NO_WARNINGS ; }
if $(JoltDebugRender) = yes { _SrcDirs += Jolt/Renderer ; }

if $(PlatformSpec) in gcc clang {
  local xclang = - ;
  if $(Platform) in windows xboxOne scarlett { xclang = /clang:- ; }
  if $(PlatformSpec) = clang { CPPopt += -Wno-overriding-option ; } # for -fno-trapping-math after -fno-unsafe-math-optimizations
  if $(Platform) in macOS iOS ps4 ps5 nswitch linux { CPPopt += -Wno-overriding-t-option ; } # ditto for older clang ver
  CPPopt += $(xclang)Wno-overriding-option $(xclang)fno-unsafe-math-optimizations $(xclang)fno-trapping-math $(xclang)ffp-contract=off ;
  if $(PlatformArch) in x86 x86_64 { CPPopt += $(xclang)mno-fma ; }
} else if $(SSEVersion) = 0 { CPPopt += /arch:SSE2 ; } # msvc windows-x86 implied
if $(Platform) in ps4 ps5 { AddIncludes += $(Root)/prog/3rdPartyLibs/posix/include/ps4 ; } # sys/prctl.h

AutoscanBuildLists $(_SrcDirs) : *.cpp : Sources ;

if $(PlatformSpec) = vc17 { opt on Jolt/Physics/Vehicle/MotorcycleController.cpp = -wd4756 ; } # overflow in constant arithmetics (?)
if $(PlatformSpec) in vc16 vc17 && $(PlatformArch) = arm64 { opt on Jolt/Math/Vec3.cpp = /Od ; } # for correct Vec3::sUnitSphere

include $(Root)/prog/_jBuild/build.jam ;

