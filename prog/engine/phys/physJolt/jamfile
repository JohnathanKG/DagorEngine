Root    ?= ../../../.. ;
Location = prog/engine/phys/physJolt ;

TargetType  = lib ;
Target      = engine/phys/physJolt.lib ;
PlatformArch_windows ?= x86_64 ;

include $(Root)/prog/_jBuild/defaults.jam ;

AddIncludes =
  $(Root)/prog/engine/sharedInclude
  $(Root)/prog/3rdPartyLibs/phys/joltPhysics
  $(Root)/prog/gameLibs/publicInclude # FIXME_BROKEN_DEP
;


Sources =
  joltPhysics.cpp
  joltPhysObject.cpp
  joltPhysRagdoll.cpp
  joltPhysSysInst.cpp
  joltDbgRender.cpp
  joltRayCar.cpp
  shapes/HeightField16Shape.cpp
;

UseProgLibs =
  engine/phys/physCommon
  3rdPartyLibs/phys/joltPhysics
  engine/heightMapLand
;

CPPopt = -DUSE_JOLT_PHYSICS ;

if $(PlatformSpec) in gcc clang {
  local xclang = - ;
  if $(Platform) in windows xboxOne scarlett { xclang = /clang:- ; }
  if $(PlatformSpec) = clang { CPPopt += -Wno-overriding-option ; } # for -fno-trapping-math after -fno-unsafe-math-optimizations
  if $(Platform) in macOS iOS ps4 ps5 nswitch linux { CPPopt += -Wno-overriding-t-option ; } # ditto for older clang ver
  CPPopt += $(xclang)Wno-overriding-option $(xclang)fno-unsafe-math-optimizations $(xclang)fno-trapping-math $(xclang)ffp-contract=off ;
  if $(PlatformArch) in x86 x86_64 { CPPopt += $(xclang)mno-fma ; }
}

include $(Root)/prog/3rdPartyLibs/phys/joltPhysics/setup.jam ;
include $(Root)/prog/_jBuild/build.jam ;
